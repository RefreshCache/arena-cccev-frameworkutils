/**********************************************************************
* Description:	TBD
* Created By:   Jason Offutt @ Central Christian Church of the East Valley
* Date Created:	TBD
*
* $Workfile: HttpCache.cs $
* $Revision: 2 $ 
* $Header: /trunk/Arena.Custom.Cccev/Arena.Custom.Cccev.FrameworkUtils/BLL/HttpCache.cs   2   2009-07-06 14:12:15-07:00   JasonO $
* 
* $Log: /trunk/Arena.Custom.Cccev/Arena.Custom.Cccev.FrameworkUtils/BLL/HttpCache.cs $
*  
*  Revision: 2   Date: 2009-07-06 21:12:15Z   User: JasonO 
*  Adding more common interface elements to caching contracts. 
*  
*  Revision: 1   Date: 2009-07-06 18:50:52Z   User: JasonO 
*  Abstracting caching. 
**********************************************************************/

using System;
using System.Web;
using System.Web.Caching;
using Arena.Custom.Cccev.FrameworkUtils.Interfaces;

namespace Arena.Custom.Cccev.FrameworkUtils.BLL
{
    public sealed class HttpCache : ICachable
    {
        private static volatile HttpCache instance;
        private static readonly object SYNC_ROOT = new object();

        /// <summary>
        /// Singleton implementation to limit how Cache is accessed.
        /// </summary>
        public static HttpCache Instance
        {
            get
            {
                if (instance == null)
                {
                    lock (SYNC_ROOT)
                    {
                        if (instance == null)
                        {
                            instance = new HttpCache();
                        }
                    }
                }

                return instance;
            }
        }

        public object Cache
        {
            get
            {
                if (HttpContext.Current == null)
                {
                    throw new NullReferenceException("If using this functionality outside of ASP.NET, set the CacheType of the caller to CacheType.Dictionary.");
                }

                return HttpContext.Current.Cache;
            }
        }

        public int Count
        {
            get { return ((Cache) Cache).Count; }
        }

        public object Get(string key)
        {
            return ((Cache) Cache).Get(key);
        }

        public void Insert(string key, object value)
        {
            ((Cache) Cache).Insert(key, value);
        }

        public void Remove(string key)
        {
            ((Cache) Cache).Remove(key);
        }

        private HttpCache()
        {
        }
    }
}
